class Solution {
    public void solve(char[][] board) {
        if(board.length==0) return;
        for(int i=0;i<board.length;i++){
            if(board[i][0]=='O'){
                dfs(board,i,0);
            }
            if(board[i][board[0].length-1]=='O'){
                dfs(board,i,board[0].length-1);
            }
        }
        
        for(int i=0;i<board[0].length;i++){
            if(board[0][i]=='O'){
                dfs(board,0,i);
            }
            if(board[board.length-1][i]=='O'){
                dfs(board,board.length-1,i);
            }
         }
        
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]=='O'){
                    board[i][j]='X';
                }
                else if(board[i][j]=='2'){
                    board[i][j]='O';
                }
            }
        }
    }
    
    void dfs(char[][] board,int row,int col){
        if(row<0 || col<0 || row>=board.length || col>=board[0].length || board[row][col]=='X' || board[row][col]=='2'){
            return;
        }
        
        board[row][col]='2';
            
        dfs(board,row-1,col);
        dfs(board,row,col-1);
        dfs(board,row+1,col);
        dfs(board,row,col+1);
    }
}
